============Reminder.js========================
import React, { Component } from 'react';
import {
    Text,
    View,
    StyleSheet,
    TouchableOpacity,
    TimePickerAndroid,
    DatePickerAndroid,
    TextInput
} from 'react-native';
import AsyncStorage from '@react-native-community/async-storage';
import { StackActions, NavigationActions } from 'react-navigation';
const reminderArr = [];

export default class Reminder extends Component {
    constructor() {
        super();
        this.setDate = this.setDate.bind(this);
        this.state = {
            chosenDate: new Date(),
            tasks: [],
            chosenAndroidTime: '00:00',
            text: '',
            androidDate: `${new Date().getUTCDate()}/${new Date().getUTCMonth() +
                1}/${new Date().getUTCFullYear()}`,
        };
    }
    setDate(newDate) {
        this.setState({ chosenDate: newDate });
    }

    setDateAndroid = async () => {
        try {
            const { action, year, month, day } = await DatePickerAndroid.open({
                date: new Date(),
                minDate: new Date(),
            });
            if (action !== DatePickerAndroid.dismissedAction) {
                this.setState({ androidDate: `${day}/${month + 1}/${year}` });
            }
        } catch ({ code, message }) {
            console.warn('Cannot open date picker', message);
        }
    };

    setTimeAndroid = async () => {
        try {
            const { action, hour, minute } = await TimePickerAndroid.open({
                hour: 14,
                minute: 0,
                is24Hour: false, // Will display '2 PM'
            });
            if (action !== TimePickerAndroid.dismissedAction) {
                // Selected hour (0-23), minute (0-59)
                const m = minute < 10 ? `0${minute}` : minute;
                const h = hour < 10 ? `0${hour}` : hour;
                console.log(`time: ${hour}:${minute}`);
                this.setState({ chosenAndroidTime: `${h}:${m}` });
            }
        } catch ({ code, message }) {
            console.warn('Cannot open time picker', message);
        }
    };

    changeText = (text) => {
        this.setState({ text: text })
    }
    saveReminder = () => {
        reminderArr.push(this.getReminder())
        this.storeData(reminderArr)
    }

    getReminder() {
        return (
            {
                androidDate: this.state.androidDate,
                chosenAndroidTime: this.state.chosenAndroidTime,
                text: this.state.text,
            }
        )
    }

    storeData = async (value) => {
        console.log("storeData " + JSON.stringify(value))
        try {
            await AsyncStorage.setItem('tasks', JSON.stringify(value))
        } catch (e) {
            // saving error
            console.log(e)
        }
    } 

    setValue = (value) => {
        console.log("test " + JSON.stringify(value))
        AsyncStorage.setItem('tasks', value);
        console.log(this.state.tasks)
    }
    render() {
        return (
            <View style={styles.container}>
                <TouchableOpacity
                    onPress={() => this.setDateAndroid()}
                    style={{ margin: 10, height: 50, width: "80%", borderWidth: 2, borderColor: 'black', marginBottom: 20, alignSelf: 'center' }}>
                    <Text style={{ fontSize: 20, fontWeight: 'bold', margin: 10, alignContent: 'center' }}>{this.state.androidDate}</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    onPress={() => this.setTimeAndroid()}
                    style={{ margin: 10, marginBottom: 20, height: 50, width: "80%", borderWidth: 2, borderColor: 'black', alignSelf: 'center' }}>
                    <Text style={{ fontSize: 20, fontWeight: 'bold', margin: 10, alignContent: 'center' }}>{this.state.chosenAndroidTime}</Text>
                </TouchableOpacity>
                <TextInput style={{ height: 50, width: "80%", borderWidth: 2, borderColor: 'black', margin: 10, alignSelf: 'center' }}
                    onChangeText={this.changeText}
                    value={this.state.text}
                />
                <TouchableOpacity style={{ height: 40, width: "40%", borderWidth: 2, backgroundColor: 'green', marginTop: 50, alignSelf: 'center' }}
                    onPress={this.saveReminder}>
                    <Text style={{ fontSize: 20, fontWeight: 'bold', margin: 10, alignContent: 'center' }}>Save Reminder</Text>
                </TouchableOpacity>
                <TouchableOpacity style={{ height: 40, width: "40%", borderWidth: 2, backgroundColor: 'green', marginTop: 50, alignSelf: 'center' }}
                    onPress={() => {
                        this.props.navigation.navigate('ReminderList', {
                            androidDate: this.state.androidDate,
                            chosenAndroidTime: this.state.chosenAndroidTime,
                            text: this.state.text,
                        });
                    }}>
                    <Text style={{ fontSize: 19, fontWeight: 'bold', margin: 10, alignContent: 'center' }}>Go To Reminder</Text>
                </TouchableOpacity>
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 50,
    },

});
=======================ReminderList.js========================================

import React, { Component } from 'react';
import { View, FlatList, Text, StyleSheet } from 'react-native';
import AsyncStorage from '@react-native-community/async-storage';
import { StackActions, NavigationActions } from 'react-navigation';

export default class ReminderList extends Component {
    constructor() {
        super();
        this.state = {
            tasks: [],
            data: ''
        }
    }
    componentDidMount() {
        this.getData();
        // AsyncStorage.getItem('tasks').then((value) => this.setState({ tasks: value }))
    }
    getData = async () => {
        try {
            const value = await AsyncStorage.getItem('tasks')
            console.log("getData " + value)
            this.setState({ data: value })
            if (value !== null) {
                // value previously stored
                // this.setState({ tasks: value })
                // setTimeout(() => {
                //     console.log("getData1 " + JSON.stringify(value))
                // }, 50);
            }
        } catch (e) {
            // error reading value
            console.log(e)
        }
    }

    render() {
        const { navigation } = this.props;
        const androidDate = navigation.getParam('androidDate')
        const chosenAndroidTime = navigation.getParam('chosenAndroidTime')
        const text = navigation.getParam('text')
        return (
            <View style={styles.container}>
                <Text style={styles.heading}>
                    Upcoming Reminders
                </Text>
                {/* <Text>Date: {JSON.stringify(androidDate)}</Text>
                <Text>Time: {JSON.stringify(chosenAndroidTime)}</Text>
                <Text>Text: {JSON.stringify(text)}</Text> */}
                <FlatList
                    style={styles.list}
                    data={this.state.data}
                    renderItem={({ item, index }) =>
                        <View style={{ flexDirection: 'row', alignItems: 'center', width: "100%" }}>
                            <View style={styles.listItemCont}>
                                <Text style={styles.listItem}>
                                    Task:  {JSON.stringify(text)}
                                </Text>
                                <Text style={styles.listItem}>
                                    Date:  {JSON.stringify(androidDate)}
                                </Text>
                                <Text style={styles.listItem}>
                                    Time:  {JSON.stringify(chosenAndroidTime)}
                                </Text>
                            </View>
                            {/* <TouchableOpacity
                                    style={{ height: 20, width: 20, marginLeft: 5 }}
                                    onPress={() => this.checkViewMethod(item, index)}>
                                    {item.isSelected === true ?
                                        <View style={{ height: 20, width: 20, backgroundColor: 'blue', marginLeft: 5 }}>
                                        </View>
                                        :
                                        <View style={{ height: 20, width: 20, borderColor: 'black', borderWidth: 3, marginLeft: 5 }}></View>
                                    }
                                </TouchableOpacity> */}
                            <View style={styles.hr} />
                        </View>}
                    extraData={this.state}
                    keyExtractor={(item, index) => index.toString()}
                />
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 10,
        justifyContent: 'center',
        alignItems: 'flex-start',
    },
    heading: {
        color: 'black',
        fontFamily: 'Helvetica',
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center',
        fontSize: 30,
        fontWeight: 'bold',
    },
    list: {
        marginTop: 30,
        marginLeft: 20,
        width: "100%",
    },
    listItem: {
        margin: 5,
        fontSize: 18,
    },
    hr: {
        height: 1,
        backgroundColor: "black"
    },
    listItemCont: {
        width: "92%",
        flexDirection: "column",
        borderWidth: 2,
        marginBottom: 20,
        justifyContent: "space-between"
    },
})

=======================================Home.js===============================================
import React, { Component } from 'react';
import { View, TouchableOpacity, StyleSheet, Text } from 'react-native';
import { StackActions, NavigationActions } from 'react-navigation';

export default class Home extends Component {
    render() {
        return (
            <View style={styles.container}>
                <TouchableOpacity style={{ height: 40, width: "38%", borderWidth: 2, backgroundColor: 'green', marginBottom: 20 }}
                    onPress={() => {
                        this.props.navigation.navigate('Reminder')
                    }}>
                    <Text style={styles.textView}>Add Reminder</Text>
                </TouchableOpacity>
                <TouchableOpacity style={{ height: 40, width: "45%", borderWidth: 2, backgroundColor: 'green' }}
                    onPress={() => {
                        this.props.navigation.navigate('ReminderList')
                    }}>
                    <Text style={styles.textView}>List of Reminders</Text>
                </TouchableOpacity>
            </View>

        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center'
    },
    textView: {
        fontSize: 20,
        margin: 10,
        fontWeight: 'bold',
        alignContent: 'center'
    }
});

============================================route.js=========================================

import { View, Text } from 'react-native';
import { createStackNavigator, createAppContainer } from 'react-navigation';
import Home from './Home';
import Reminder from './Reminder';
import ReminderList from './ReminderList';


const MainNavigator = createStackNavigator({
    Home: { screen: Home },
    Reminder: { screen: Reminder },
    ReminderList: { screen: ReminderList },
    initialRouteName: 'Home',
});

const Route = createAppContainer(MainNavigator);

export default Route;
